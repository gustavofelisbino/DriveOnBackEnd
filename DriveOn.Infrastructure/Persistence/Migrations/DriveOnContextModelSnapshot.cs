// <auto-generated />
using System;
using DriveOn.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DriveOn.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DriveOnContext))]
    partial class DriveOnContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("driveon")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DriveOn.Domain.Entities.Cidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EstadoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EstadoId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId1");

                    b.HasIndex("EstadoId", "Nome")
                        .IsUnique();

                    b.ToTable("cidades", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<long?>("CidadeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cpf")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.ToTable("clientes", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.ContaPagar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<long>("FornecedorId")
                        .HasColumnType("bigint");

                    b.Property<int>("Parcelas")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("Vencimento")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("contas_pagar", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.ContaReceber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrdemServicoId")
                        .HasColumnType("bigint");

                    b.Property<int>("Parcelas")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("Vencimento")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("contas_receber", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Empresa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Bairro")
                        .HasColumnType("text");

                    b.Property<string>("Cep")
                        .HasColumnType("text");

                    b.Property<long?>("CidadeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CidadeId1")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Documento")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Numero")
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("CidadeId1");

                    b.ToTable("empresas", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Estado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.HasIndex("Sigla")
                        .IsUnique();

                    b.ToTable("estados", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Fornecedor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Documento")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("fornecedores", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("numeric");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId", "Codigo")
                        .IsUnique();

                    b.ToTable("itens", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.ItemOrdemServico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrdemServicoId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrdemServicoId");

                    b.ToTable("itens_ordem_servico", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.MovimentoFinanceiro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ContaPagarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContaReceberId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DataMovimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("movimentos_financeiros", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.OrdemServico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("AbertaEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("AtualizadoPor")
                        .HasColumnType("bigint");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("CriadoPor")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DescontoValor")
                        .HasColumnType("numeric");

                    b.Property<string>("Descricao")
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FinalizadaEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("aberta");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric");

                    b.Property<long>("VeiculoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ordens_servico", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmpresaId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("SenhaAtualizadaEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId1");

                    b.HasIndex("EmpresaId", "Email")
                        .IsUnique();

                    b.ToTable("usuarios", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Veiculo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("Ano")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("AtualizadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ExcluidoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Marca")
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .HasColumnType("text");

                    b.Property<string>("Observacoes")
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId", "Placa")
                        .IsUnique();

                    b.ToTable("veiculos", "driveon");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Cidade", b =>
                {
                    b.HasOne("DriveOn.Domain.Entities.Estado", null)
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveOn.Domain.Entities.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId1");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("DriveOn.Domain.Entities.Cidade", null)
                        .WithMany()
                        .HasForeignKey("CidadeId");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Empresa", b =>
                {
                    b.HasOne("DriveOn.Domain.Entities.Cidade", null)
                        .WithMany()
                        .HasForeignKey("CidadeId");

                    b.HasOne("DriveOn.Domain.Entities.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId1");

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.ItemOrdemServico", b =>
                {
                    b.HasOne("DriveOn.Domain.Entities.OrdemServico", null)
                        .WithMany("Itens")
                        .HasForeignKey("OrdemServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("DriveOn.Domain.Entities.Empresa", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveOn.Domain.Entities.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId1");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Empresa", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("DriveOn.Domain.Entities.OrdemServico", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
